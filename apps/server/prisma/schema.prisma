// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  TEACHER
  ADMIN
}

model User {
  id          String @id @default(uuid())
  username    String @unique @default(cuid())
  email       String @unique
  phone       String @unique
  displayName String
  password    String
  roles       Role[] @default([USER])
  balance     Float  @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courses   Course[]

  @@map("users")
}

model Token {
  id        String  @id @default(uuid())
  userId    String
  token     String  @default(cuid())
  userAgent String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime

  @@map("tokens")
}

model Course {
  id           String   @id @default(uuid())
  slug         String   @unique
  title        String
  description  String
  price        Float    @default(0)
  participants User[]
  teacherId    String
  categories   String[]
  keywords     String[]
  images       String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lessons   Lesson[]
  quizzes   Quiz[]

  @@map("courses")
}

model Lesson {
  id       String @id @default(uuid())
  title    String
  content  String
  courseId String
  course   Course @relation(fields: [courseId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("lessons")
}

model Answer {
  id         String   @id @default(uuid())
  content    String
  questionId String
  question   Question @relation(fields: [questionId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("answers")
}

model Question {
  id              String   @id @default(uuid())
  title           String
  quizId          String
  quiz            Quiz     @relation(fields: [quizId], references: [id])
  answers         Answer[]
  correctAnswerId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("questions")
}

model Quiz {
  id        String     @id @default(uuid())
  title     String
  courseId  String
  course    Course     @relation(fields: [courseId], references: [id])
  questions Question[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("quizzes")
}
